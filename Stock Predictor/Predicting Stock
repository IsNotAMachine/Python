import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pandas_datareader as web
import datetime as dt

from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM

# Loading data
company = 'FB'

# specify time the data is taken from
start = dt.datetime(2013, 1, 1)
end = dt.datetime(2022, 1, 1)

# Getting data from the web needing ticker
data = web.DataReader(company, 'yahoo', start, end)

# Prepare data for neural network
# Need a scalar first to scale down all the values we have from 0 to 1
scaler = MinMaxScaler(feature_range=(0, 1))

# Going to look at the closing price for the prediction
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

# Defining prediction days, how many days to look into the past
prediction_days = 60

# Define two empty lists to create the training data
x_train = []
y_train = []

# Create a loop to fill up the lists and start with prediction days and up until the length of the scaled data
for x in range(prediction_days, len(scaled_data)):
    x_train.append(scaled_data[x - prediction_days: x, 0])
    y_train.append(scaled_data[x, 0])

# convert the lists into numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

# reshape x train to work with neural network
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Build the model
model = Sequential()

# Can experiment with units to see how the prediction changes
model.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(units = 50))
model.add(Dropout(0.2))

# Prediction of the next closing value
model.add(Dense(units = 1))

# Compile the model
model.compile(optimizer = 'adam', loss = 'mean_squared_error')
# fit the model on training data
# epochs is how many times the model sees the training data
# batch size is saying the model will look at 32 units at the same time
model.fit(x_train, y_train, epochs = 25, batch_size = 32)

''' Test the model accuracy on existing data '''

# Load test data
test_start = dt.datetime(2022, 1, 1)
test_end = dt.datetime.now()

test_data = web.DataReader(company, 'yahoo', test_start, test_end)
actual_prices = test_data['Close'].values

total_dataset = pd.concat((data['Close'], test_data['Close']), axis = 0)

# model looks at so it can predict the next price
model_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values

# reshape model inputs
model_inputs = model_inputs.reshape(-1, 1)
model_inputs = scaler.transform(model_inputs)

# Make predictions on test data
x_test = []

for x in range(prediction_days, len(model_inputs)):
    x_test.append(model_inputs[x - prediction_days:x, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predicted_prices = model.predict(x_test)
predicted_prices = scaler.inverse_transform(predicted_prices)

# Plot the test predictions
plt.plot(actual_prices, color = 'black', label = f"Actual {company} price")
plt.plot(predicted_prices, color = 'green', label = f"Predicted {company} price")
plt.title(f"{company} Share Price")
plt.xlabel('Time')
plt.ylabel(f"{company} Share Price")
plt.legend()
plt.show()

print("Let's predict")

#  Predict Next Day
real_data = [model_inputs[len(model_inputs) + 1 - prediction_days:len(model_inputs + 1), 0]]
real_data = np.array(real_data)
real_data = np.reshape(real_data, (real_data.shape[0], real_data.shape[1], 1))

print(scaler.inverse_transform(real_data[-1]))

# going to prediction
prediction = model.predict(real_data)
prediction = scaler.inverse_transform(prediction)
print(f"Prediction {prediction}")
